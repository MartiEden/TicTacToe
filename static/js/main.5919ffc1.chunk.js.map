{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","isWinner","value","current_array","last_click_value","index","winner_line","winner_lines","setTimeout","gameMessageAdd","setState","square","Array","fill","counter","gameMessageRemove","document","querySelectorAll","forEach","el","classList","contains","remove","message","querySelector","add","checkEmptyFields","current_square_array","count","notification","console","log","length","state","clickHandler","event","current_value","target","getAttribute","alert","className","id","this","map","onClick","data","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0OAqIeA,G,wDAjIb,WAAaC,GAAQ,IAAD,8BAClB,cAAMA,IAiBRC,SAAW,SAACC,EAAOC,GAIjB,IAHA,IAAMC,EAAmBD,EAAcD,GAG9BG,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACtC,IAAMC,EAAc,EAAKC,aAAaF,GAElCF,EAAcG,EAAY,MAAQF,GACpCD,EAAcG,EAAY,MAAQF,GAClCD,EAAcG,EAAY,MAAQF,GAElCI,YAAW,WACT,EAAKC,eAAL,UAAuBL,EAAvB,6BAEAI,YAAW,WACT,EAAKE,SAAS,CACZC,OAAQC,MAAM,GAAGC,KAAK,MACtBC,QAAS,IAEX,EAAKC,oBACLC,SAASC,iBAAiB,eAAeC,SAAQ,SAAAC,GAC3CA,EAAGC,UAAUC,SAAS,oBACxBF,EAAGC,UAAUE,OAAO,wBAGvB,OAEF,OA7CW,EAmDpBb,eAAiB,SAAAc,GACf,EAAKb,SAAS,CAAEa,QAASA,IACzBP,SAASQ,cAAc,iBAAiBJ,UAAUK,IAAI,oBArDpC,EAwDpBV,kBAAoB,WAClB,EAAKL,SAAS,CAAEa,QAAS,KACzBP,SAASQ,cAAc,iBAAiBJ,UAAUE,OAAO,oBA1DvC,EA6DpBI,iBAAmB,SAAAC,GACjB,IAAIC,EAAQ,EACRC,EAAeb,SAASQ,cAAc,iBAC1CM,QAAQC,KAAKF,GAEb,IAAK,IAAIxB,EAAQ,EAAGA,EAAQsB,EAAqBK,OAAQ3B,IACnB,OAAhCsB,EAAqBtB,IACvBuB,IAIuB,IAAvB,EAAKK,MAAMnB,SAA2B,IAAVc,GAAgBC,GAC9CrB,YAAW,WACT,EAAKC,eAAe,2BACpBD,YAAW,WACT,EAAKE,SAAS,CACZC,OAAQC,MAAM,GAAGC,KAAK,MACtBC,QAAS,IAEX,EAAKC,sBACJ,OAEF,MAnFa,EAuFpBmB,aAAe,SAAAC,GAEb,IAAIC,EAAgBD,EAAME,OAAOC,aAAa,QAC1CX,EAAuB,EAAKM,MAAMtB,OAGjCgB,EAAqBS,GAWxBG,MAAM,6CAVF,EAAKN,MAAMnB,QAAU,IAAM,GAC7BqB,EAAME,OAAOb,cAAc,eAAeJ,WAAa,mBACvDO,EAAqBS,GAAiB,MAEtCD,EAAME,OAAOb,cAAc,eAAeJ,WAAa,mBACvDO,EAAqBS,GAAiB,KAExC,EAAK1B,SAAS,CAAEI,QAAS,EAAKmB,MAAMnB,QAAU,IAC9C,EAAKJ,SAAS,CAAEC,OAAQgB,KAK1B,EAAK1B,SAASmC,EAAeT,GAC7B,EAAKD,iBAAiBC,IA1GtB,EAAKM,MAAQ,CACXtB,OAAQC,MAAM,GAAGC,KAAK,MACtBC,QAAS,EACTS,QAAS,IAEX,EAAKhB,aAAe,CAClB,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAfS,E,qDA8GT,IAAD,OACR,OACE,yBAAKiC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKA,UAAU,aAAaC,GAAG,cAE3BC,KAAKT,MAAMtB,OAAOgC,KAAI,SAACxB,EAAId,GAAL,OAAe,0BAAMuC,QAAS,EAAKV,aAAcW,KAAMxC,EAC3EmC,UAAU,mBAAmBM,IAAG,cAASzC,IAAS,0BAAMmC,UAAU,cAAcrB,QAItF,0BAAMqB,UAAU,gBAAgBE,KAAKT,MAAMV,e,GA1HnCwB,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFvC,SAASwC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMzC,a","file":"static/js/main.5919ffc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor (props) {\r\n    super(props);\r\n    this.state = {\r\n      square: Array(9).fill(null),\r\n      counter: 0,\r\n      message: ''\r\n    };\r\n    this.winner_lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n  }\r\n  isWinner = (value, current_array) => {\r\n    const last_click_value = current_array[value];\r\n\r\n\r\n    for (let index = 0; index < 8; index++) {\r\n      const winner_line = this.winner_lines[index];\r\n\r\n      if (current_array[winner_line[0]] === last_click_value &&\r\n        current_array[winner_line[1]] === last_click_value &&\r\n        current_array[winner_line[2]] === last_click_value) {\r\n\r\n        setTimeout(() => {\r\n          this.gameMessageAdd(`${last_click_value} win!!! Try Once Again! `)\r\n\r\n          setTimeout(() => {\r\n            this.setState({\r\n              square: Array(9).fill(null),\r\n              counter: 0\r\n            });\r\n            this.gameMessageRemove();\r\n            document.querySelectorAll('.item-value').forEach(el => {\r\n              if (el.classList.contains('opacity-enabled')) {\r\n                el.classList.remove('opacity-enabled');\r\n              }\r\n            });\r\n          }, 5000)\r\n\r\n        }, 500)\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  gameMessageAdd = message => {\r\n    this.setState({ message: message });\r\n    document.querySelector('.notification').classList.add('opacity-enabled');\r\n  }\r\n\r\n  gameMessageRemove = () => {\r\n    this.setState({ message: \"\" });\r\n    document.querySelector('.notification').classList.remove('opacity-enabled');\r\n  }\r\n\r\n  checkEmptyFields = current_square_array => {\r\n    let count = 0;\r\n    let notification = document.querySelector('.notification');\r\n    console.log(!notification);\r\n\r\n    for (let index = 0; index < current_square_array.length; index++) {\r\n      if (current_square_array[index] === null) {\r\n        count++;\r\n      }\r\n    }\r\n\r\n    if (this.state.counter === 8 && count === 0 && !notification) {\r\n      setTimeout(() => {\r\n        this.gameMessageAdd(\"DRAW !!! Try Once Again\")\r\n        setTimeout(() => {\r\n          this.setState({\r\n            square: Array(9).fill(null),\r\n            counter: 0\r\n          });\r\n          this.gameMessageRemove();\r\n        }, 5000)\r\n\r\n      }, 500)\r\n    }\r\n  }\r\n\r\n  clickHandler = event => {\r\n\r\n    let current_value = event.target.getAttribute('data');\r\n    let current_square_array = this.state.square;\r\n\r\n\r\n    if (!current_square_array[current_value]) {\r\n      if (this.state.counter % 2 === 0) {\r\n        event.target.querySelector('.item-value').classList += ' opacity-enabled';\r\n        current_square_array[current_value] = \"X\"\r\n      } else {\r\n        event.target.querySelector('.item-value').classList += ' opacity-enabled';\r\n        current_square_array[current_value] = \"O\"\r\n      }\r\n      this.setState({ counter: this.state.counter + 1 })\r\n      this.setState({ square: current_square_array })\r\n    } else {\r\n      alert(\"You're wrong! Please, fill another field\")\r\n    }\r\n\r\n    this.isWinner(current_value, current_square_array);\r\n    this.checkEmptyFields(current_square_array);\r\n  }\r\n  render () {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <div className=\"app-square\" id=\"app-square\">\r\n            {\r\n              this.state.square.map((el, index) => <span onClick={this.clickHandler} data={index}\r\n                className=\"app-square__item\" key={`item${index}`}><span className=\"item-value\">{el}</span></span>)\r\n            }\r\n          </div>\r\n\r\n          <span className=\"notification\">{this.state.message}</span>\r\n        </header>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}