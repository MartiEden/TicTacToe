{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","isWinner","value","current_array","last_click_value","index","winner_line","winner_lines","setTimeout","gameMessageAdd","setState","square","Array","fill","counter","gameMessageRemove","document","querySelectorAll","forEach","el","classList","contains","remove","message","querySelector","add","checkEmptyFilelds","current_square_array","count","length","clickHandler","event","current_value","target","getAttribute","state","alert","className","id","this","map","onClick","data","key","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.5443bb11.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      square: Array(9).fill(null),\n      counter: 0,\n      message: ''\n    };\n    this.winner_lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [3, 4, 6],\n    ];\n  }\n  isWinner = (value, current_array) => {\n    const last_click_value = current_array[value];\n\n\n    for (let index = 0; index < 8; index++) {\n      const winner_line = this.winner_lines[index];\n\n      if (current_array[winner_line[0]] === last_click_value &&\n        current_array[winner_line[1]] === last_click_value &&\n        current_array[winner_line[2]] === last_click_value) {\n\n        setTimeout(() => {\n          this.gameMessageAdd(`${last_click_value} win!!! Try Once Again! `)\n         \n          setTimeout(() => {\n            this.setState({\n              square: Array(9).fill(null),\n              counter: 0\n            });\n            this.gameMessageRemove();\n            document.querySelectorAll('.item-value').forEach(el => {\n              if (el.classList.contains('opacity-enabled')) {\n                el.classList.remove('opacity-enabled');\n              }\n            });\n          }, 5000)\n\n        }, 500)\n      }\n\n    }\n  }\n\n  gameMessageAdd = message => {\n    this.setState({ message: message });\n    document.querySelector('.notification').classList.add('opacity-enabled');\n  }\n\n  gameMessageRemove = () => {\n    this.setState({ message: \"\" });\n    document.querySelector('.notification').classList.remove('opacity-enabled');\n  }\n\n  checkEmptyFilelds = current_square_array => {\n    let count = 0;\n    for (let index = 0; index < current_square_array.length; index++) {\n      if (current_square_array[index] === null) {\n        count++;\n      }\n    }\n    if (count === 0) {\n      setTimeout(() => {\n        this.gameMessageAdd(\"DRAW !!! Try Once Again\")\n        setTimeout(() => {\n          this.setState({\n            square: Array(9).fill(null),\n            counter: 0\n          });\n          this.gameMessageRemove();\n        }, 5000)\n\n      }, 500)\n    }\n  }\n\n  clickHandler = event => {\n\n    let current_value = event.target.getAttribute('data');\n    let current_square_array = this.state.square;\n\n\n    if (!current_square_array[current_value]) {\n      if (this.state.counter % 2 === 0) {\n        event.target.querySelector('.item-value').classList += ' opacity-enabled';\n        current_square_array[current_value] = \"X\"\n      } else {\n        event.target.querySelector('.item-value').classList += ' opacity-enabled';\n        current_square_array[current_value] = \"O\"\n      }\n      this.setState({ counter: this.state.counter + 1 })\n      this.setState({ square: current_square_array })\n    } else {\n      alert(\"You're wrong! Please, fill another field\")\n    }\n\n    this.isWinner(current_value, current_square_array);\n    this.checkEmptyFilelds(current_square_array);\n  }\n  render () {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"app-square\" id=\"app-square\">\n            {\n              this.state.square.map((el, index) => <span onClick={this.clickHandler} data={index}\n                className=\"app-square__item\" key={`item${index}`}><span className=\"item-value\">{el}</span></span>)\n            }\n          </div>\n\n          <span class=\"notification\">{this.state.message}</span>\n        </header>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}